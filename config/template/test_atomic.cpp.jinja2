#include <cassert>
#include <iostream>

template<class T>
void test_{{name}}(){

 // Input and Outputs
 {% for l in loops %}
 const int {{ l.N }} = {{l.v}};
 {%- endfor %}

T counter{};

// Main program
{% for fat_pragma in fat_path %}
#pragma omp {{fat_pragma["pragma"]}} {% if "target" in fat_pragma %} map(tofrom: counter) {% endif %}
{% if "loop" in fat_pragma %}
    for (int {{fat_pragma["loop"].i}} = 0 ; {{fat_pragma["loop"].i}} < {{fat_pragma["loop"].N}} ; {{fat_pragma["loop"].i}}++ )
{% endif %}
{
{% endfor %}

#pragma omp atomic update
counter++;

{% for fat_pragma in fat_path %}
}
{% endfor %}

// Validation
auto bo = ( counter {{expected_value[0]}} {{expected_value[1]}} ) ;
if ( bo != true) {
    std::cerr << "Expected: " << {{expected_value[1]}} << " Get: " << counter << std::endl;
    assert(bo);
}

}
int main()
{
    test_{{name}}<double>();
}

