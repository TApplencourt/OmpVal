{% if output_type_category == "complex" %}
#include <complex>
{% else %}
#include <cmath>
{% endif %}

#include <limits>
#include <iostream>
#include <stdexcept>

using namespace std;

bool almost_equal({{output_type}} x, {{output_type}} y, int ulp) {
{% if output_type_category in ("integer","bool")  %}
    return x == y ; 
{% elif output_type_category == "float" %}
     return std::fabs(x-y) <= std::numeric_limits<{{output_type}}>::epsilon() * std::fabs(x+y) * ulp ||  std::fabs(x-y) < std::numeric_limits<{{output_type}}>::min();
{% elif output_type_category == "complex" %}
    bool r = std::fabs(x.real()-y.real()) <= std::numeric_limits<{{output_type_T}}>::epsilon() * std::fabs(x.real()+y.real()) * ulp ||  std::fabs(x.real()-y.real()) < std::numeric_limits<{{output_type_T}}>::min();
    bool i = std::fabs(x.imag()-y.imag()) <= std::numeric_limits<{{output_type_T}}>::epsilon() * std::fabs(x.imag()+y.imag()) * ulp ||  std::fabs(x.imag()-y.imag()) < std::numeric_limits<{{output_type_T}}>::min();
    return r && i;
{% endif %}
}

void test_{{name}}(){
   {% for type, name, val in zip(input_types, input_names, input_values) %}
   {{type}} {{name}} {  {{val}} };
   {% endfor %}

   {{output_type}} o_host = {{name}}( {{ input_names |join(', ') }});

   {{output_type}} o_gpu ; 
   #pragma omp target defaultmap(tofrom:scalar)
   {
   o_gpu = {{name}}( {{ input_names |join(', ') }});
   }

   if ( !almost_equal(o_host,o_gpu,1) ) {
        std::cerr << "Host: " << o_host << " GPU: " << o_gpu << std::endl;
        throw std::runtime_error( "{{name}} give incorect value when offloaded");
    }
}

int main()
{
    test_{{name}}();
}

