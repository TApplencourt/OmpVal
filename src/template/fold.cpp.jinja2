{% from 'utils.cpp.jinja2' import prologue_general, prologue_function, epilogue_function, increment with context%}

{{ prologue_general(T_category, balenced) }}

{% if T_category == "complex" %}
#if !defined(_NO_UDR)
#pragma omp declare reduction(+: {{T}}: omp_out += omp_in)
#endif
{% endif %}

void test_{{name}}(){

{{ prologue_function(T, loops) }}

{% for fat_pragma in fat_path %}
  {%- if family == 'reduction_atomic' and  "partial" in fat_pragma %}
{{T}} partial_counter{};
  {%- endif  %}
#pragma omp {{fat_pragma["pragma"]}}
  {%- if    "reduce_host"  in fat_pragma                                                     %} reduction(+: counter)  
  {%- elif  family in ('reduction','threaded_reduction')  and "reduce"         in fat_pragma %} reduction(+: counter)
  {%- elif  family == 'reduction_atomic'                  and "partial_reduce" in fat_pragma %} reduction(+: partial_counter) {%- endif %}
  {%- if "target" in fat_pragma %} map(tofrom: counter) {% endif %}

{% if "loop" in fat_pragma %}
    for (int {{fat_pragma["loop"].i}} = 0 ; {{fat_pragma["loop"].i}} < {{fat_pragma["loop"].N}} ; {{fat_pragma["loop"].i}}++ )
    {
{% endif %}

{% if "only_teams" in fat_pragma %}
    {
const int num_teams = omp_get_num_teams();
{% elif "only_parallel" in fat_pragma %}
    {
const int num_threads = omp_get_num_threads();
{% endif %}

{% endfor %}

{% if   family in ('atomic','threaded_atomic')  %}
#pragma omp atomic update
{{ increment('counter', T, balenced, only_teams, only_parallel) }}
{% elif family in ('reduction','threaded_reduction')  %}
{{ increment('counter', T, balenced, only_teams, only_parallel) }}
{% elif family == 'reduction_atomic' %}
{{ increment('partial_counter', T, balenced, only_teams, only_parallel) }}
{% endif %}

{% for fat_pragma in fat_path|reverse %}
{% if "loop" in fat_pragma or  "only_teams" in fat_pragma or "only_parallel" in fat_pragma %}
    }
{%endif%}

{% if family == 'reduction_atomic' and "partial" in fat_pragma%}
#pragma omp atomic update
counter += partial_counter;
{% endif %}
{% endfor %}

{{ epilogue_function(T, expected_value) }}
}
int main()
{
    test_{{name}}();
}

