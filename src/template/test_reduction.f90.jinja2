{% set is_cmplx = (T_category == "complex") %}

{% if not balenced %}
#ifndef _OPENMP
{% for n in ("teams","threads") %}
FUNCTION omp_get_num_{{n}}() RESULT(i) 
    INTEGER :: i
    i = 1
END FUNCTION omp_get_num_{{n}}
{% endfor %}
#endif
{% endif %}

FUNCTION almost_equal(x, gold, tol) result(b)
    implicit none
    {{T}}, intent(in) :: x
    INTEGER,  intent(in) ::gold
    REAL, intent(in)  :: tol
    LOGICAL          :: b
    {%if is_cmplx %}
    b = ( gold * (1 - tol)  <= ABS(x) ).AND.( ABS(x) <= gold * (1+tol)  )
    {%else%}
    b = ( gold * (1 - tol)  <= x ).AND.( x <= gold * (1+tol)  )
    {%endif%}
END FUNCTION almost_equal

program {{name}}
{% if not balenced %}
#ifdef _OPENMP
    USE OMP_LIB
    implicit none
#else
    implicit none
    INTEGER:: omp_get_num_teams, omp_get_num_threads
#endif
{% endif %}

    LOGICAL :: almost_equal

  {% for l in loops %}
    INTEGER :: {{ l.N }} = {{l.v}}
    INTEGER :: {{ l.i }} 
  {%- endfor %}
    
    {{T}} :: COUNTER = {% if is_cmplx %} (   {%endif%} 0  {% if is_cmplx %} ,0) {%endif%} 

    {% if only_teams %}
    INTEGER :: num_teams
    {% endif %}
    {% if only_parallel %}
    INTEGER :: num_threads
    {% endif %}
     
    {% for fat_pragma in fat_path %}
    !$OMP {{fat_pragma["pragma"]}}  {% if "reduce" in fat_pragma %} REDUCTION(+:COUNTER) {% endif %} {% if "target" in fat_pragma %} MAP(TOFROM: COUNTER) {% endif %}

{% if "loop" in fat_pragma %}
    DO {{fat_pragma["loop"].i}} = 1 , {{fat_pragma["loop"].N}} 
{% endif %}

    {% if "only_teams" in fat_pragma %}
    num_teams = omp_get_num_teams()
    {% elif "only_parallel" in fat_pragma %}
    num_threads = omp_get_num_threads()
    {% endif %}

    {% endfor %}

{% if balenced %}
counter = counter + {% if is_cmplx %} CMPLX(  {%endif%} 1. {% if is_cmplx %} ,0) {%endif%} 
{% elif only_teams and only_parallel %}
counter = counter + {% if is_cmplx %} CMPLX(  {%endif%} 1./(num_teams*num_threads)  {% if is_cmplx %} ,0) {%endif%}
{% elif only_teams  %}
counter = counter + {% if is_cmplx %} CMPLX(  {%endif%} 1./num_teams  {% if is_cmplx %} ,0) {%endif%}
{% elif only_parallel  %}
counter =  counter + {% if is_cmplx %} CMPLX( {%endif%} 1./num_threads  {% if is_cmplx %} ,0) {%endif%}
{% endif %}
 
    {% for fat_pragma in fat_path | reverse %} 
{% if "loop" in fat_pragma %}
    END DO
{% endif %}
    !$OMP END {{fat_pragma["pragma"]}}
    {% endfor %}

    IF  ( .NOT.almost_equal(COUNTER, {{expected_value}}, 0.1) ) THEN
        write(*,*)  'Expected', {{expected_value}},  'Got', COUNTER
        call exit(1)
    ENDIF

end program {{name}}
