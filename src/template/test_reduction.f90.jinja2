{% from 'utils.f90.jinja2' import prologue_general, prologue_function, epilogue_function with context%}
{% set is_cmplx = (T_category == "complex") %}

{{ prologue_general(is_cmplx) }}

PROGRAM {{name}}
    
    {{ prologue_function(loops, only_teams, only_parallel, is_cmplx) }}
 
    {% for fat_pragma in fat_path %}
    !$OMP {{fat_pragma["pragma"]}}  {% if "reduce" in fat_pragma %} REDUCTION(+:COUNTER) {% endif %} {% if "target" in fat_pragma %} MAP(TOFROM: COUNTER) {% endif %}

{% if "loop" in fat_pragma %}
    DO {{fat_pragma["loop"].i}} = 1 , {{fat_pragma["loop"].N}} 
{% endif %}

    {% if "only_teams" in fat_pragma %}
    num_teams = omp_get_num_teams()
    {% elif "only_parallel" in fat_pragma %}
    num_threads = omp_get_num_threads()
    {% endif %}

    {% endfor %}

{% if balenced %}
counter = counter + {% if is_cmplx %} CMPLX(  {%endif%} 1. {% if is_cmplx %} ,0) {%endif%} 
{% elif only_teams and only_parallel %}
counter = counter + {% if is_cmplx %} CMPLX(  {%endif%} 1./(num_teams*num_threads)  {% if is_cmplx %} ,0) {%endif%}
{% elif only_teams  %}
counter = counter + {% if is_cmplx %} CMPLX(  {%endif%} 1./num_teams  {% if is_cmplx %} ,0) {%endif%}
{% elif only_parallel  %}
counter =  counter + {% if is_cmplx %} CMPLX( {%endif%} 1./num_threads  {% if is_cmplx %} ,0) {%endif%}
{% endif %}
 
    {% for fat_pragma in fat_path | reverse %} 
{% if "loop" in fat_pragma %}
    END DO
{% endif %}
    !$OMP END {{fat_pragma["pragma"]}}
    {% endfor %}

    {{ epilogue_function('counter', expected_value) }}
END PROGRAM {{name}}
