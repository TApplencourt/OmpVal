{#  _                    _     __               #}
{# / \ ._   _  ._  |\/| |_)   (_ _|_     |_   _ #}
{# \_/ |_) (/_ | | |  | |     __) |_ |_| |_) _> #}
{#     |                                        #}

{% if not balenced %}
#ifndef _OPENMP
   {% if only_teams %}
FUNCTION omp_get_num_teams() RESULT(i)
  INTEGER :: i
  i = 1
END FUNCTION omp_get_num_teams
   {% endif %}
   {% if only_parallel %}
FUNCTION omp_get_num_threads() RESULT(i)
  INTEGER :: i
  i = 1
END FUNCTION omp_get_num_threads
   {% endif %}
#endif
{% endif %}

{#  _                                         _                         #}
{# /   _  ._ _  ._   _. ._ _. o  _  _  ._    |_    ._   _ _|_ o  _  ._  #}
{# \_ (_) | | | |_) (_| | (_| | _> (_) | |   | |_| | | (_  |_ | (_) | | #}
{#              |                                                       #}


{# For memcopy we compare 'bitwise', for folder we compare relatively due to floating point arithmetic #}

{% if test_type != 'memcopy' %}
FUNCTION almost_equal(x, gold, tol) RESULT(b)
  implicit none
  {{T}}, intent(in) :: x
  INTEGER,  intent(in) :: gold
  REAL,     intent(in) :: tol
  LOGICAL              :: b
   {% if T.category =="complex" %}
  b = ( gold * (1 - tol)  <= ABS(x) ).AND.( ABS(x) <= gold * (1+tol) )
   {% else %}
  b = ( gold * (1 - tol)  <= x ).AND.( x <= gold * (1+tol) )
   {% endif %}
END FUNCTION almost_equal
{% endif %}


{# ___  ___      _        ______                _   _              #}
{# |  \/  |     (_)       |  ___|              | | (_)             #}
{# | .  . | __ _ _ _ __   | |_ _   _ _ __   ___| |_ _  ___  _ __   #}
{# | |\/| |/ _\` | | '_ \ |  _| | | | '_ \ / __| __| |/ _ \| '_ \  #}
{# | |  | | (_| | | | | | | | | |_| | | | | (__| |_| | (_) | | | | #}
{# \_|  |_/\__,_|_|_| |_| \_|  \__,_|_| |_|\___|\__|_|\___/|_| |_| #}
{#                                                                 #}

PROGRAM {{name}}

{#                               _                                   #}
{# \  / _. ._ o  _. |_  |  _    | \  _   _ |  _. ._ _. _|_ o  _  ._  #}
{#  \/ (_| |  | (_| |_) | (/_   |_/ (/_ (_ | (_| | (_|  |_ | (_) | | #}
{#                                                                   #}

{% if not balenced %}
#ifdef _OPENMP
  USE OMP_LIB
  implicit none
#else
  implicit none
   {% if only_teams %}
  INTEGER :: omp_get_num_teams
   {% endif %}
   {% if only_parallel %}
  INTEGER :: omp_get_num_threads
   {% endif %}
#endif
{% endif %}

{% for loop_constructs in region_loop_construct %}
{% for loop_  in loop_constructs %}
  INTEGER :: {{ loop_.N }} = {{ loop_.v }}
  INTEGER :: {{ loop_.i }}
{% endfor %}
{% endfor %}

{% if test_type != 'memcopy' %}
  LOGICAL :: almost_equal
    {# We need unique in the case of non temporary result #}
    {% for counter in region_counters | unique %}
  {{T}} :: {{counter}}
    {% endfor %}
  INTEGER :: expected_value
  expected_value = {{expected_value}}
{% else %}
  INTEGER :: idx
  INTEGER :: S
  {{T}}, ALLOCATABLE :: src(:)
  {{T}}, ALLOCATABLE :: dst(:)
   {% if  T.category == "complex" %}
  REAL, ALLOCATABLE :: src_real(:)
  REAL, ALLOCATABLE :: src_imag(:)
   {%endif%}

  S = {{problem_size}}
  ALLOCATE(dst(S), src(S) )

   {% if T.category == "complex" %}
  ALLOCATE(src_real(S),src_imag(S))
  CALL RANDOM_NUMBER(src_real)
  CALL RANDOM_NUMBER(src_imag)
  src = CMPLX(src_real,src_imag)
  DEALLOCATE (src_real,src_imag)
   {% else %}
  CALL RANDOM_NUMBER(src)
   {% endif %}

{% endif %}

{#                      _                          #}
{# |   _   _  ._   _   |_) ._ _  |  _   _       _  #}
{# |_ (_) (_) |_) _>   |   | (_) | (_) (_| |_| (/_ #}
{#            |                         _|         #}

{% for region, region_additional_pragma, loop_constructs, counter in zip_longest(regions, regions_additional_pragma, region_loop_construct,region_counters, fillvalue=[]) %}
{% filter indent(width=2*loop.index) %}
   {# In the case of 'local' test, we use only one counter in the outermost enclosing scope #}
   {% if  test_type != 'memcopy' and (intermediate_result or loop.first) %}
{{counter}} = 0
   {% endif %}
   {% for pragma, additional_pragma in zip_longest(region, region_additional_pragma, fillvalue='') %}
!$OMP {{pragma | replace("for ","do ")}} {{additional_pragma}}
   {% endfor %}

   {% for loop_  in loop_constructs %}
DO {{loop_.i}} = 1, {{loop_.N}}
   {% endfor %}
{% endfilter %}
{% endfor %}

{#                      _                         #}
{# |   _   _  ._   _   |_ ._  o |  _   _       _  #}
{# |_ (_) (_) |_) _>   |_ |_) | | (_) (_| |_| (/_ #}
{#            |           |            _|         #}
{% for increments, region, loop_constructs in zip(regions_increment,regions, region_loop_construct) | reverse %}
   {% filter indent(width=2*(loop.revindex+1)) %}

      {# In the case of 'local' test, we increment the counter only in the inner most enclosing scope #}
      {% if test_type != 'memcopy' and (intermediate_result or loop.first) %}

         {% if 'atomic' in test_type %}
!$OMP omp atomic update
         {% endif %}

         {% if increments.j %}
{{increments.v}} = {{increments.v}} + {{increments.i}}  / {{increments.j}} ;
         {% else %}
{{increments.v}} = {{increments.v}} + {{increments.i}}
         {% endif %}
      
      {% elif test_type == 'memcopy' and loop.first %}
idx = {{index}}
dst(idx) = src(idx)
      {% endif %}

   {% endfilter %}

   {# The closing braket are indented by one less level #}
   {% filter indent(width=2*loop.revindex) %}
      {% for loop_  in loop_constructs %}
END DO
      {% endfor %}
   {% endfilter %}

   {% filter indent(width=2*loop.revindex) %}
         {% for pragma in region | reverse %}
      {% if paired_pragmas or not loop_constructs or not loop.first %}
!$OMP END {{pragma}}
      {% endif %}
         {% endfor %}
   {% endfilter %}
{% endfor %}


{#                                   #}
{# \  / _. | o  _|  _. _|_ o  _  ._  #}
{#  \/ (_| | | (_| (_|  |_ | (_) | | #}
{#                                   #}

{# https://tldp.org/LDP/abs/html/exitcodes.html, we choose 112 #}

{%if test_type == 'memcopy' %}
   {% if T.category == "complex" %}
  IF (ANY(ABS(dst - src) > EPSILON(REAL(src)))) THEN
   {% else %}
  IF (ANY(ABS(dst - src) > EPSILON(src))) THEN
   {% endif %}
    WRITE(*,*)  'Wrong value', MAXVAL(ABS(DST-SRC)), 'max difference'
{% else %}
  IF ( .NOT.almost_equal({{region_counters | first }},expected_value, 0.1) ) THEN
    WRITE(*,*)  'Expected', expected_value,  'Got', {{region_counters | first }}
{% endif %}
    {# To follow the standart we should use ERROR STOP. But it's a Fortran 2008 feature...#}
    {# That may cause portabilities issue #}
    STOP 112
  ENDIF

END PROGRAM {{name}}
