{% if have_complex %}
#include <complex>
{% endif %}
#include <cmath>
#include <iomanip> {# setprecision #}
#include <limits>
#include <iostream>
#include <cstdlib>
using namespace std;

{% for output in l_argv | selectattr('is_output') | unique(attribute='T.without_pointer') %} 
   {% if not output.T.category in ("integer","bool") %}
bool almost_equal({{output.T.without_pointer}} x, {{output.T.without_pointer}} y, int ulp) {
      {% if output.T.category == "float" %}
     return std::fabs(x-y) <= std::numeric_limits<{{output.T.internal}}>::epsilon() * std::fabs(x+y) * ulp ||  std::fabs(x-y) < std::numeric_limits<{{output.T.internal}}>::min();
      {% elif output.T.category == "complex" %}
    return std::abs(x-y) <= std::numeric_limits<{{output.T.internal}}>::epsilon() * std::abs(x+y) * ulp ||  std::abs(x-y) < std::numeric_limits<{{output.T.internal}}>::min();
      {% endif %}
   }
   {% endif %}
{% endfor %}

void test_{{name}}(){
   {% for input in l_argv | selectattr('is_input')  %}
   {{input.T}} {{input.name}} {  {{input.val}} };
   {% endfor %}

   {% for output in l_argv | selectattr('is_output') %}
   {{output.T.without_pointer}} {{output.name_host}};
   {{output.T.without_pointer}} {{output.name_device}};
   {% endfor %}

   {%if scalar_output %} {{scalar_output.name_host}} = {% endif %} {{name}}( {{ l_argv | selectattr('is_argv') | join(', ',attribute='argv_host') }});
   
   #pragma omp target map(from: {{ l_argv | selectattr('is_output') | join(', ', attribute='name_device')  }} )
   {
    {%if scalar_output %} {{scalar_output.name_device}} = {% endif %} {{name}}( {{ l_argv | selectattr('is_argv') | join(', ',attribute='argv_device') }});
   }

   {% for output in l_argv | selectattr('is_output')  %}
      {% if output.T.category in ("integer","bool")  %}
   if ( {{output.name_host}} != {{output.name_device}} ) {
      {% else %}
   if ( !almost_equal({{output.name_host}},{{output.name_device}}, 4) ) {
      {% endif %}
        std::cerr << std::setprecision (std::numeric_limits<{{output.T.internal}}>::max_digits10 ) << "Host: " << {{output.name_host}} << " GPU: " << {{output.name_device}} << std::endl;
        {# https://tldp.org/LDP/abs/html/exitcodes.html, we choose 112 #}
        std::exit(112);
    }
    {% endfor %}
}

int main()
{
    test_{{name}}();
}

