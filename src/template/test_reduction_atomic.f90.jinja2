{% from 'utils.f90.jinja2' import prologue_general, prologue_function, increment, epilogue_function with context%}

{{ prologue_general() }}

PROGRAM {{name}}
    
    {{ prologue_function(loops, only_teams, only_parallel) }}
    {{T}} :: partial_counter
 
    {% for fat_pragma in fat_path %}
    {%if "partial" in fat_pragma%}
    partial_counter = 0.
    !$OMP {{fat_pragma["pragma"]}} REDUCTION(+:partial_counter) 
    {%else %}
    !$OMP {{fat_pragma["pragma"]}} {% if "partial_reduce" in fat_pragma %} REDUCTION(+:partial_counter) {% endif %} {% if "target" in fat_pragma %} MAP(TOFROM: counter) {% endif %}
    {%endif%}


{% if "loop" in fat_pragma %}
    DO {{fat_pragma["loop"].i}} = 1 , {{fat_pragma["loop"].N}} 
{% endif %}

    {% if "only_teams" in fat_pragma %}
    num_teams = omp_get_num_teams()
    {% elif "only_parallel" in fat_pragma %}
    num_threads = omp_get_num_threads()
    {% endif %}

    {% endfor %}

{{ increment('partial_counter', balenced, only_teams, only_parallel) }}
 
    {% for fat_pragma in fat_path | reverse %} 

{% if "loop" in fat_pragma %}
    END DO
{% endif %}

    !$OMP END {{fat_pragma["pragma"]}}

{%if "partial" in fat_pragma %}
!$OMP ATOMIC UPDATE
counter = counter + partial_counter
{% endif %}

    {% endfor %}

    {{ epilogue_function('counter', expected_value) }}

END PROGRAM {{name}}

