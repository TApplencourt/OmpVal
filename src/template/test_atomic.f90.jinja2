program {{name}}
{% if not balenced %}
    USE OMP_LIB
{% endif %}

    implicit none
  {% for l in loops %}
    INTEGER :: {{ l.N }} = {{l.v}}
    INTEGER :: {{ l.i }} 
  {%- endfor %}
    
    {{T}} :: COUNTER = 0

    {% if only_teams %}
    INTEGER :: num_teams
    {% endif %}
    {% if only_parallel %}
    INTEGER :: num_threads
    {% endif %}

     
    {% for fat_pragma in fat_path %}
    !$OMP {{fat_pragma["pragma"]}} {% if "target" in fat_pragma %}  MAP(TOFROM: COUNTER) {% endif %}

{% if "loop" in fat_pragma %}
    DO {{fat_pragma["loop"].i}} = 1 , {{fat_pragma["loop"].N}} 
{% endif %}

    {% if "only_teams" in fat_pragma %}
    num_teams = omp_get_num_teams()
    {% elif "only_parallel" in fat_pragma %}
    num_threads = omp_get_num_threads()
    {% endif %}

    {% endfor %}

!$OMP ATOMIC UPDATE
{% if balenced %}
counter = counter + 1.
{% elif only_teams and only_parallel %}
counter = counter + 1./(num_teams*num_threads)
{% elif only_teams  %}
counter = counter + 1./num_teams
{% elif only_parallel  %}
counter =  counter +1./num_threads
{% endif %}

 
    {% for fat_pragma in fat_path | reverse %} 
{% if "loop" in fat_pragma %}
    END DO
{% endif %}
    !$OMP END {{fat_pragma["pragma"]}}
    {% endfor %}

    IF  ( ( ABS(COUNTER - {{expected_value}}) ) > 10*EPSILON(COUNTER) ) THEN
        write(*,*)  'Expected {{expected_value}} Got', COUNTER
        call exit(1)
    ENDIF

end program {{name}}
