{% from 'utils.cpp.jinja2' import for_loop_prologue with context%}

#include <iostream>
#include <limits>
#include <cmath>
{% if T_category == "complex" %}
#include <complex>
using namespace std;
{% endif %}
#include <vector>
#include <algorithm>
    
bool almost_equal({{T}} x, {{T}} y, int ulp) {
{% if T_category == "float" %}
     return std::fabs(x-y) <= std::numeric_limits<{{T}}>::epsilon() * std::fabs(x+y) * ulp ||  std::fabs(x-y) < std::numeric_limits<{{T}}>::min();
{% elif T_category == "complex" %}
    return std::abs(x-y) <= std::numeric_limits<{{T_type}}>::epsilon() * std::abs(x+y) * ulp ||  std::abs(x-y) < std::numeric_limits<{{T_type}}>::min();
{% endif %}
}

void test_{{name}}(){
  {% for l in loops %}
  const int {{ l.N }} = {{l.v}};
  {%- endfor %}
  const int size = {{size}};
  std::vector<{{T}}> A(size);
  std::vector<{{T}}> B(size);
  std::generate(B.begin(), B.end(), std::rand);

  {{T}} *pA = A.data();
  {{T}} *pB = B.data();

{% for fat_pragma in fat_path %}
#pragma omp {{fat_pragma["pragma"]}} {% if "target" in fat_pragma %}  map(from: pA[0:{{size}}]) map(to: pB[0:{{size}}]) {% endif %}
{%- if n_collapse != 0 and  "loop" in fat_pragma %} collapse({{n_collapse}}) {% endif %}
{{ for_loop_prologue(fat_pragma) }}
{% endfor %}
const int idx = {{index}};
pA[idx] = pB[idx];

{% for _ in range(n_loop_section) %} 
    } 
{% endfor %}

for (int i = 0 ;  i < size ; i++) {
    if ( !almost_equal(A[i],B[i],1) ) {
         std::cerr << "Expected: " << B[i] << " Got: " << A[i] << std::endl;
        {# https://tldp.org/LDP/abs/html/exitcodes.html, we choose 112 #}
        std::exit(112);
    }
}
 
}

int main()
{
    test_{{name}}();
}
