#include <iostream>
#include <limits>

{% if T_category == "complex" %}
#include <complex>
using namespace std;
{% endif %}

{% if not balenced %}
#ifdef _OPENMP
#include <omp.h>
#else
int omp_get_num_teams() {return 1;}
int omp_get_num_threads() {return 1;}
#endif
{% endif %}

bool almost_equal({{T}} x, {{T}} y, int ulp) {
{% if T_category == "float" %}
     return std::fabs(x-y) <= std::numeric_limits<{{T}}>::epsilon() * std::fabs(x+y) * ulp ||  std::fabs(x-y) < std::numeric_limits<{{T}}>::min();
{% elif T_category == "complex" %}
    bool r = std::fabs(x.real()-y.real()) <= std::numeric_limits<{{T_type}}>::epsilon() * std::fabs(x.real()+y.real()) * ulp ||  std::fabs(x.real()-y.real()) < std::numeric_limits<{{T_type}}>::min();
    bool i = std::fabs(x.imag()-y.imag()) <= std::numeric_limits<{{T_type}}>::epsilon() * std::fabs(x.imag()+y.imag()) * ulp ||  std::fabs(x.imag()-y.imag()) < std::numeric_limits<{{T_type}}>::min();
    return r && i;
{% endif %}
}

{% if T_category == "complex" %}
#pragma omp declare reduction(ComplexReduction: {{T}}:   omp_out += omp_in) 
{% endif %}

void test_{{name}}(){

 // Input and Outputs
 {% for l in loops %}
 const int {{ l.N }} = {{l.v}};
 {%- endfor %}

{{T}} counter{};

// Main program
{% for fat_pragma in fat_path %}
#pragma omp {{fat_pragma["pragma"]}} {% if "reduce" in fat_pragma %} reduction( {% if T_category == "complex" %} ComplexReduction {%else%} + {%endif%} :counter) {%endif%} {% if "target" in fat_pragma %} map(tofrom:counter) {% endif %}
{% if "loop" in fat_pragma %}
    for (int {{fat_pragma["loop"].i}} = 0 ; {{fat_pragma["loop"].i}} < {{fat_pragma["loop"].N}} ; {{fat_pragma["loop"].i}}++ )
{% endif %}
{
{% if "only_teams" in fat_pragma %}
const int num_teams = omp_get_num_teams();
{% elif "only_parallel" in fat_pragma %}
const int num_threads = omp_get_num_threads();
{% endif %}
{% endfor %}

{% if balenced %}
counter += {{T}} { 1.0f };
{% elif only_teams and only_parallel %}
counter += {{T}} { 1.0f/(num_teams*num_threads) } ;
{% elif only_teams  %}
counter += {{T}} { 1.0f/num_teams } ;
{% elif only_parallel  %}
counter += {{T}} { 1.0f/num_threads };
{% endif %}

{% for fat_pragma in fat_path %}
}
{% endfor %}

// Validation
if ( !almost_equal(counter,{{T}} { {{expected_value}} }, 10)  ) {
    std::cerr << "Expected: " << {{expected_value}} << " Got: " << counter << std::endl;
    throw std::runtime_error( "{{name}} give incorect value when offloaded");
}

}
int main()
{
    test_{{name}}();
}

