#include <stdlib.h>
#include <numeric>
#include <math.h>
#include <cassert>
#include <iostream>
#include <cmath>

void test_{{name}}(){

    // Declare Size of Loop
    {% for name, value in zip(l_LMN, l_size) %}
    const int {{ name }} = {{value}};
    {%- endfor %}

    // Initialize array
    int A = 0;

    // Computation
    {% for structured_block, (loop_pragma, i, N) in l_pragma %}
            {% for pragma in structured_block %}
                #pragma omp {{pragma}} {% if is_target(pragma) %} map(tofrom: A) {% endif %}
            {
            {% endfor %}

            {% if loop_pragma %}
                #pragma omp {{loop_pragma}} {% if is_target(loop_pragma) %} map(tofrom: A) {% endif %}
                for (int {{i}} = 0 ; {{i}} < {{N}} ; {{i}}++ )
            {% endif %}
            {
        {% endfor %}
        #pragma omp atomic update
        A++;
        
        {% for structured_block, _ in l_pragma %}
            {% for pragma in structured_block %}
            }
            {% endfor %}
            }
    {% endfor %}

    // Validation
    {% if fair %}
    assert( A == {{l_LMN|join("*")}} );
    {% else %}
    assert( A >= 0 );
    {% endif %}

    std::cout << "OK" << std::endl ;
}   

int main()
{
    test_{{name}}();
}

