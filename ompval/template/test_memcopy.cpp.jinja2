#include <stdlib.h>
#include <numeric>
#include <math.h>
#include <cassert>
#include <iostream>
#include <cmath>

void test_{{name}}(){

    // Declare Size of array
    {% for name, value in zip(l_var_array_size, l_array_size) %}
    const int {{ name }} = {{value}};
    {%- endfor %}



    // Initialize array
    {% if l_var_array_size | length %}
        double A{{array_mapping(l_var_array_size,True)}};
        double B{{array_mapping(l_var_array_size,True)}} = { {{array_init_value(l_array_size)}} };
    {% endif %}

    // Computation
    {%- if l_var_array_size | length -%}
        {% for structured_block, (loop_pragma, i, N) in l_pragma2 %}
            {% for pragma in structured_block %}
                #pragma omp {{pragma}} {% if is_target(pragma) %} map(from: A{{array_mapping(l_var_array_size)}}) map(to: B{{array_mapping(l_var_array_size)}}) {% endif %}
            {
            {% endfor %}

            {% if loop_pragma %}
                #pragma omp {{loop_pragma}} {% if is_target(loop_pragma) %} map(from: A{{array_mapping(l_var_array_size)}}) map(to: B{{array_mapping(l_var_array_size)}}) {% endif %}
                for (int {{i}} = 0 ; {{i}} < {{N}} ; {{i}}++ )
            {% endif %}
            {
        {% endfor %}
        A{{ array_mapping(l_var_loop_idx,True)}} = B{{array_mapping(l_var_loop_idx,True)}};


        {% for structured_block, (loop_pragma, i, N) in l_pragma2 %}
            {% for pragma in structured_block %}
            }
            {% endfor %}
            }
        {% endfor %}

    {% endif %}

    // Validation
    {%- if l_var_array_size | length -%}
        {% for structured_block, (_, i, N) in l_pragma2 %}
        for (int {{i}} = 0 ; {{i}} < {{N}} ; {{i}}++ )
            {
        {% endfor %}
        assert( std::fabs( A{{ array_mapping(l_var_loop_idx,True)}} - B{{array_mapping(l_var_loop_idx,True)}}) < 1E-9 );
        {%- for _ in l_pragma2 %}
        }
        {%- endfor %}
    std::cout << "OK" << std::endl ;
    {%- endif %}
}   

int main()
{
    test_{{name}}();
}

