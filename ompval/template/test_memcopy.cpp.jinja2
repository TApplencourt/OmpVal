#include <stdlib.h>
#include <numeric>
#include <math.h>
#include <cassert>
#include <iostream>
#include <cmath>

void test_{{name}}(){

    // Declare Size of array
    {% for name, value in zip(l_LMN, l_size) %}
    const int {{ name }} = {{value}};
    {%- endfor %}

    // Initialize array
    double A{{array_mapping(l_LMN,True)}};
    double B{{array_mapping(l_LMN,True)}} = { {{array_init_value(l_size)}} };

    // Computation
    {% for structured_block, (loop_pragma, i, N) in l_pragma %}
        {% for pragma in structured_block %}
           #pragma omp {{pragma}} {% if is_target(pragma) %} map(from: A{{array_mapping(l_LMN)}}) map(to: B{{array_mapping(l_LMN)}}) {% endif %}
            {
        {% endfor %}

        {% if loop_pragma %}
            #pragma omp {{loop_pragma}} {% if is_target(loop_pragma) %} map(from: A{{array_mapping(l_LMN)}}) map(to: B{{array_mapping(l_LMN)}}) {% endif %}
            for (int {{i}} = 0 ; {{i}} < {{N}} ; {{i}}++ )
        {% endif %}
        {
    {% endfor %}
        
    A{{ array_mapping(l_ijk,True)}} = B{{array_mapping(l_ijk,True)}};

    {% for structured_block, _ in l_pragma %}
        {% for pragma in structured_block %}
        }
        {% endfor %}
        }
    {% endfor %}

    // Validation
    {% for structured_block, (loop_pragma, i, N) in l_pragma %}
        {% if loop_pragma %}
        for (int {{i}} = 0 ; {{i}} < {{N}} ; {{i}}++ )
        {% endif %}
        {
    {% endfor %}
    assert( std::fabs( A{{ array_mapping(l_ijk,True)}} - B{{array_mapping(l_ijk,True)}}) < 1E-9 );
    {%- for _ in l_pragma %}
        }
    {%- endfor %}
    std::cout << "OK" << std::endl ;
}

int main()
{
    test_{{name}}();
}

